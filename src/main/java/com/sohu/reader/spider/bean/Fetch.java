/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.reader.spider.bean;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.hibernate.annotations.GenericGenerator;
import javax.persistence.*;

@Entity
@Table(name="fetchs")
public class Fetch implements org.apache.thrift.TBase<Fetch, Fetch._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Fetch");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FETCH_FREQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchFrequence", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_FETCH_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastFetchAt", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FETCH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchStatus", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FETCH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FETCH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchInfo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FETCH_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchError", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FetchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FetchTupleSchemeFactory());
  }

  public long id; // required
  public long fetchFrequence; // required
  public long lastFetchAt; // required
  public int fetchStatus; // required
  public int fetchType; // required
  public String fetchInfo; // required
  public long sourceId; // required
  public String fetchError; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FETCH_FREQUENCE((short)2, "fetchFrequence"),
    LAST_FETCH_AT((short)3, "lastFetchAt"),
    FETCH_STATUS((short)4, "fetchStatus"),
    FETCH_TYPE((short)5, "fetchType"),
    FETCH_INFO((short)6, "fetchInfo"),
    SOURCE_ID((short)7, "sourceId"),
    FETCH_ERROR((short)8, "fetchError");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FETCH_FREQUENCE
          return FETCH_FREQUENCE;
        case 3: // LAST_FETCH_AT
          return LAST_FETCH_AT;
        case 4: // FETCH_STATUS
          return FETCH_STATUS;
        case 5: // FETCH_TYPE
          return FETCH_TYPE;
        case 6: // FETCH_INFO
          return FETCH_INFO;
        case 7: // SOURCE_ID
          return SOURCE_ID;
        case 8: // FETCH_ERROR
          return FETCH_ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FETCHFREQUENCE_ISSET_ID = 1;
  private static final int __LASTFETCHAT_ISSET_ID = 2;
  private static final int __FETCHSTATUS_ISSET_ID = 3;
  private static final int __FETCHTYPE_ISSET_ID = 4;
  private static final int __SOURCEID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH_FREQUENCE, new org.apache.thrift.meta_data.FieldMetaData("fetchFrequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_FETCH_AT, new org.apache.thrift.meta_data.FieldMetaData("lastFetchAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("fetchStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FETCH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fetchType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FETCH_INFO, new org.apache.thrift.meta_data.FieldMetaData("fetchInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FETCH_ERROR, new org.apache.thrift.meta_data.FieldMetaData("fetchError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Fetch.class, metaDataMap);
  }

  public Fetch() {
  }

  public Fetch(
          long id,
          long fetchFrequence,
          long lastFetchAt,
          int fetchStatus,
          int fetchType,
          String fetchInfo,
          long sourceId,
          String fetchError)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.fetchFrequence = fetchFrequence;
    setFetchFrequenceIsSet(true);
    this.lastFetchAt = lastFetchAt;
    setLastFetchAtIsSet(true);
    this.fetchStatus = fetchStatus;
    setFetchStatusIsSet(true);
    this.fetchType = fetchType;
    setFetchTypeIsSet(true);
    this.fetchInfo = fetchInfo;
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    this.fetchError = fetchError;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Fetch(Fetch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.fetchFrequence = other.fetchFrequence;
    this.lastFetchAt = other.lastFetchAt;
    this.fetchStatus = other.fetchStatus;
    this.fetchType = other.fetchType;
    if (other.isSetFetchInfo()) {
      this.fetchInfo = other.fetchInfo;
    }
    this.sourceId = other.sourceId;
    if (other.isSetFetchError()) {
      this.fetchError = other.fetchError;
    }
  }

  public Fetch deepCopy() {
    return new Fetch(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setFetchFrequenceIsSet(false);
    this.fetchFrequence = 0;
    setLastFetchAtIsSet(false);
    this.lastFetchAt = 0;
    setFetchStatusIsSet(false);
    this.fetchStatus = 0;
    setFetchTypeIsSet(false);
    this.fetchType = 0;
    this.fetchInfo = null;
    setSourceIdIsSet(false);
    this.sourceId = 0;
    this.fetchError = null;
  }

  @Id 
  @GeneratedValue(generator = "identity") 
  @GenericGenerator(name = "identity", strategy = "identity") 
  @Column(name="id")
  public long getId() {
    return this.id;
  }

  public Fetch setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @Column(name="fetch_frequence")
  public long getFetchFrequence() {
    return this.fetchFrequence;
  }

  public Fetch setFetchFrequence(long fetchFrequence) {
    this.fetchFrequence = fetchFrequence;
    setFetchFrequenceIsSet(true);
    return this;
  }

  public void unsetFetchFrequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FETCHFREQUENCE_ISSET_ID);
  }

  /** Returns true if field fetchFrequence is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetFetchFrequence() {
    return EncodingUtils.testBit(__isset_bitfield, __FETCHFREQUENCE_ISSET_ID);
  }

  public void setFetchFrequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FETCHFREQUENCE_ISSET_ID, value);
  }

  @Column(name="last_fetch_at")
  public long getLastFetchAt() {
    return this.lastFetchAt;
  }

  public Fetch setLastFetchAt(long lastFetchAt) {
    this.lastFetchAt = lastFetchAt;
    setLastFetchAtIsSet(true);
    return this;
  }

  public void unsetLastFetchAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTFETCHAT_ISSET_ID);
  }

  /** Returns true if field lastFetchAt is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetLastFetchAt() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTFETCHAT_ISSET_ID);
  }

  public void setLastFetchAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTFETCHAT_ISSET_ID, value);
  }

  @Column(name="fetch_status")
  public int getFetchStatus() {
    return this.fetchStatus;
  }

  public Fetch setFetchStatus(int fetchStatus) {
    this.fetchStatus = fetchStatus;
    setFetchStatusIsSet(true);
    return this;
  }

  public void unsetFetchStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FETCHSTATUS_ISSET_ID);
  }

  /** Returns true if field fetchStatus is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetFetchStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FETCHSTATUS_ISSET_ID);
  }

  public void setFetchStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FETCHSTATUS_ISSET_ID, value);
  }

  @Column(name="fetch_type")
  public int getFetchType() {
    return this.fetchType;
  }

  public Fetch setFetchType(int fetchType) {
    this.fetchType = fetchType;
    setFetchTypeIsSet(true);
    return this;
  }

  public void unsetFetchType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FETCHTYPE_ISSET_ID);
  }

  /** Returns true if field fetchType is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetFetchType() {
    return EncodingUtils.testBit(__isset_bitfield, __FETCHTYPE_ISSET_ID);
  }

  public void setFetchTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FETCHTYPE_ISSET_ID, value);
  }

  @Column(name="fetch_info")
  public String getFetchInfo() {
    return this.fetchInfo;
  }

  public Fetch setFetchInfo(String fetchInfo) {
    this.fetchInfo = fetchInfo;
    return this;
  }

  public void unsetFetchInfo() {
    this.fetchInfo = null;
  }

  /** Returns true if field fetchInfo is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetFetchInfo() {
    return this.fetchInfo != null;
  }

  public void setFetchInfoIsSet(boolean value) {
    if (!value) {
      this.fetchInfo = null;
    }
  }

  @Column(name="source_id")
  public long getSourceId() {
    return this.sourceId;
  }

  public Fetch setSourceId(long sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    return this;
  }

  public void unsetSourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetSourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
  }

  @Column(name="fetch_error")
  public String getFetchError() {
    return this.fetchError;
  }

  public Fetch setFetchError(String fetchError) {
    this.fetchError = fetchError;
    return this;
  }

  public void unsetFetchError() {
    this.fetchError = null;
  }

  /** Returns true if field fetchError is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetFetchError() {
    return this.fetchError != null;
  }

  public void setFetchErrorIsSet(boolean value) {
    if (!value) {
      this.fetchError = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case FETCH_FREQUENCE:
      if (value == null) {
        unsetFetchFrequence();
      } else {
        setFetchFrequence((Long)value);
      }
      break;

    case LAST_FETCH_AT:
      if (value == null) {
        unsetLastFetchAt();
      } else {
        setLastFetchAt((Long)value);
      }
      break;

    case FETCH_STATUS:
      if (value == null) {
        unsetFetchStatus();
      } else {
        setFetchStatus((Integer)value);
      }
      break;

    case FETCH_TYPE:
      if (value == null) {
        unsetFetchType();
      } else {
        setFetchType((Integer)value);
      }
      break;

    case FETCH_INFO:
      if (value == null) {
        unsetFetchInfo();
      } else {
        setFetchInfo((String)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Long)value);
      }
      break;

    case FETCH_ERROR:
      if (value == null) {
        unsetFetchError();
      } else {
        setFetchError((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case FETCH_FREQUENCE:
      return Long.valueOf(getFetchFrequence());

    case LAST_FETCH_AT:
      return Long.valueOf(getLastFetchAt());

    case FETCH_STATUS:
      return Integer.valueOf(getFetchStatus());

    case FETCH_TYPE:
      return Integer.valueOf(getFetchType());

    case FETCH_INFO:
      return getFetchInfo();

    case SOURCE_ID:
      return Long.valueOf(getSourceId());

    case FETCH_ERROR:
      return getFetchError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FETCH_FREQUENCE:
      return isSetFetchFrequence();
    case LAST_FETCH_AT:
      return isSetLastFetchAt();
    case FETCH_STATUS:
      return isSetFetchStatus();
    case FETCH_TYPE:
      return isSetFetchType();
    case FETCH_INFO:
      return isSetFetchInfo();
    case SOURCE_ID:
      return isSetSourceId();
    case FETCH_ERROR:
      return isSetFetchError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Fetch)
      return this.equals((Fetch)that);
    return false;
  }

  public boolean equals(Fetch that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fetchFrequence = true;
    boolean that_present_fetchFrequence = true;
    if (this_present_fetchFrequence || that_present_fetchFrequence) {
      if (!(this_present_fetchFrequence && that_present_fetchFrequence))
        return false;
      if (this.fetchFrequence != that.fetchFrequence)
        return false;
    }

    boolean this_present_lastFetchAt = true;
    boolean that_present_lastFetchAt = true;
    if (this_present_lastFetchAt || that_present_lastFetchAt) {
      if (!(this_present_lastFetchAt && that_present_lastFetchAt))
        return false;
      if (this.lastFetchAt != that.lastFetchAt)
        return false;
    }

    boolean this_present_fetchStatus = true;
    boolean that_present_fetchStatus = true;
    if (this_present_fetchStatus || that_present_fetchStatus) {
      if (!(this_present_fetchStatus && that_present_fetchStatus))
        return false;
      if (this.fetchStatus != that.fetchStatus)
        return false;
    }

    boolean this_present_fetchType = true;
    boolean that_present_fetchType = true;
    if (this_present_fetchType || that_present_fetchType) {
      if (!(this_present_fetchType && that_present_fetchType))
        return false;
      if (this.fetchType != that.fetchType)
        return false;
    }

    boolean this_present_fetchInfo = true && this.isSetFetchInfo();
    boolean that_present_fetchInfo = true && that.isSetFetchInfo();
    if (this_present_fetchInfo || that_present_fetchInfo) {
      if (!(this_present_fetchInfo && that_present_fetchInfo))
        return false;
      if (!this.fetchInfo.equals(that.fetchInfo))
        return false;
    }

    boolean this_present_sourceId = true;
    boolean that_present_sourceId = true;
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_fetchError = true && this.isSetFetchError();
    boolean that_present_fetchError = true && that.isSetFetchError();
    if (this_present_fetchError || that_present_fetchError) {
      if (!(this_present_fetchError && that_present_fetchError))
        return false;
      if (!this.fetchError.equals(that.fetchError))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Fetch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Fetch typedOther = (Fetch)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchFrequence()).compareTo(typedOther.isSetFetchFrequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchFrequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchFrequence, typedOther.fetchFrequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastFetchAt()).compareTo(typedOther.isSetLastFetchAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastFetchAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastFetchAt, typedOther.lastFetchAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchStatus()).compareTo(typedOther.isSetFetchStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchStatus, typedOther.fetchStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchType()).compareTo(typedOther.isSetFetchType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchType, typedOther.fetchType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchInfo()).compareTo(typedOther.isSetFetchInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchInfo, typedOther.fetchInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(typedOther.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, typedOther.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchError()).compareTo(typedOther.isSetFetchError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchError, typedOther.fetchError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Fetch(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchFrequence:");
    sb.append(this.fetchFrequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastFetchAt:");
    sb.append(this.lastFetchAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchStatus:");
    sb.append(this.fetchStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchType:");
    sb.append(this.fetchType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchInfo:");
    if (this.fetchInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.fetchInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceId:");
    sb.append(this.sourceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchError:");
    if (this.fetchError == null) {
      sb.append("null");
    } else {
      sb.append(this.fetchError);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchStandardSchemeFactory implements SchemeFactory {
    public FetchStandardScheme getScheme() {
      return new FetchStandardScheme();
    }
  }

  private static class FetchStandardScheme extends StandardScheme<Fetch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Fetch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FETCH_FREQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fetchFrequence = iprot.readI64();
              struct.setFetchFrequenceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_FETCH_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastFetchAt = iprot.readI64();
              struct.setLastFetchAtIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FETCH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchStatus = iprot.readI32();
              struct.setFetchStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FETCH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchType = iprot.readI32();
              struct.setFetchTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FETCH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fetchInfo = iprot.readString();
              struct.setFetchInfoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sourceId = iprot.readI64();
              struct.setSourceIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FETCH_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fetchError = iprot.readString();
              struct.setFetchErrorIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Fetch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_FREQUENCE_FIELD_DESC);
      oprot.writeI64(struct.fetchFrequence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_FETCH_AT_FIELD_DESC);
      oprot.writeI64(struct.lastFetchAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_STATUS_FIELD_DESC);
      oprot.writeI32(struct.fetchStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fetchType);
      oprot.writeFieldEnd();
      if (struct.fetchInfo != null) {
        oprot.writeFieldBegin(FETCH_INFO_FIELD_DESC);
        oprot.writeString(struct.fetchInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sourceId);
      oprot.writeFieldEnd();
      if (struct.fetchError != null) {
        oprot.writeFieldBegin(FETCH_ERROR_FIELD_DESC);
        oprot.writeString(struct.fetchError);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchTupleSchemeFactory implements SchemeFactory {
    public FetchTupleScheme getScheme() {
      return new FetchTupleScheme();
    }
  }

  private static class FetchTupleScheme extends TupleScheme<Fetch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Fetch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFetchFrequence()) {
        optionals.set(1);
      }
      if (struct.isSetLastFetchAt()) {
        optionals.set(2);
      }
      if (struct.isSetFetchStatus()) {
        optionals.set(3);
      }
      if (struct.isSetFetchType()) {
        optionals.set(4);
      }
      if (struct.isSetFetchInfo()) {
        optionals.set(5);
      }
      if (struct.isSetSourceId()) {
        optionals.set(6);
      }
      if (struct.isSetFetchError()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetFetchFrequence()) {
        oprot.writeI64(struct.fetchFrequence);
      }
      if (struct.isSetLastFetchAt()) {
        oprot.writeI64(struct.lastFetchAt);
      }
      if (struct.isSetFetchStatus()) {
        oprot.writeI32(struct.fetchStatus);
      }
      if (struct.isSetFetchType()) {
        oprot.writeI32(struct.fetchType);
      }
      if (struct.isSetFetchInfo()) {
        oprot.writeString(struct.fetchInfo);
      }
      if (struct.isSetSourceId()) {
        oprot.writeI64(struct.sourceId);
      }
      if (struct.isSetFetchError()) {
        oprot.writeString(struct.fetchError);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Fetch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fetchFrequence = iprot.readI64();
        struct.setFetchFrequenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastFetchAt = iprot.readI64();
        struct.setLastFetchAtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fetchStatus = iprot.readI32();
        struct.setFetchStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fetchType = iprot.readI32();
        struct.setFetchTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fetchInfo = iprot.readString();
        struct.setFetchInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sourceId = iprot.readI64();
        struct.setSourceIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fetchError = iprot.readString();
        struct.setFetchErrorIsSet(true);
      }
    }
  }

}

