/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.reader.spider.bean;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.hibernate.annotations.GenericGenerator;
import javax.persistence.*;

@Entity
@Table(name="sources")
public class Source implements org.apache.thrift.TBase<Source, Source._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Source");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("intro", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ICON_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("iconInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUBSCRIBE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribeCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderWeight", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField RECOMMEND_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendFlag", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FETCH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SourceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SourceTupleSchemeFactory());
  }

  public long id; // required
  public String name; // required
  public String intro; // required
  public String sourceUrl; // required
  public String iconInfo; // required
  public int subscribeCount; // required
  public long channelId; // required
  public int orderWeight; // required
  public int level; // required
  public int status; // required
  public int recommendFlag; // required
  public int fetchStatus; // required
  public long createdAt; // required
  public long updatedAt; // required
  public int online; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    INTRO((short)3, "intro"),
    SOURCE_URL((short)4, "sourceUrl"),
    ICON_INFO((short)5, "iconInfo"),
    SUBSCRIBE_COUNT((short)6, "subscribeCount"),
    CHANNEL_ID((short)7, "channelId"),
    ORDER_WEIGHT((short)8, "orderWeight"),
    LEVEL((short)9, "level"),
    STATUS((short)10, "status"),
    RECOMMEND_FLAG((short)11, "recommendFlag"),
    FETCH_STATUS((short)12, "fetchStatus"),
    CREATED_AT((short)13, "createdAt"),
    UPDATED_AT((short)14, "updatedAt"),
    ONLINE((short)15, "online");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // INTRO
          return INTRO;
        case 4: // SOURCE_URL
          return SOURCE_URL;
        case 5: // ICON_INFO
          return ICON_INFO;
        case 6: // SUBSCRIBE_COUNT
          return SUBSCRIBE_COUNT;
        case 7: // CHANNEL_ID
          return CHANNEL_ID;
        case 8: // ORDER_WEIGHT
          return ORDER_WEIGHT;
        case 9: // LEVEL
          return LEVEL;
        case 10: // STATUS
          return STATUS;
        case 11: // RECOMMEND_FLAG
          return RECOMMEND_FLAG;
        case 12: // FETCH_STATUS
          return FETCH_STATUS;
        case 13: // CREATED_AT
          return CREATED_AT;
        case 14: // UPDATED_AT
          return UPDATED_AT;
        case 15: // ONLINE
          return ONLINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SUBSCRIBECOUNT_ISSET_ID = 1;
  private static final int __CHANNELID_ISSET_ID = 2;
  private static final int __ORDERWEIGHT_ISSET_ID = 3;
  private static final int __LEVEL_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __RECOMMENDFLAG_ISSET_ID = 6;
  private static final int __FETCHSTATUS_ISSET_ID = 7;
  private static final int __CREATEDAT_ISSET_ID = 8;
  private static final int __UPDATEDAT_ISSET_ID = 9;
  private static final int __ONLINE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRO, new org.apache.thrift.meta_data.FieldMetaData("intro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("sourceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_INFO, new org.apache.thrift.meta_data.FieldMetaData("iconInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSCRIBE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("subscribeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("orderWeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECOMMEND_FLAG, new org.apache.thrift.meta_data.FieldMetaData("recommendFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FETCH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("fetchStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Source.class, metaDataMap);
  }

  public Source() {
  }

  public Source(
          long id,
          String name,
          String intro,
          String sourceUrl,
          String iconInfo,
          int subscribeCount,
          long channelId,
          int orderWeight,
          int level,
          int status,
          int recommendFlag,
          int fetchStatus,
          long createdAt,
          long updatedAt,
          int online)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.intro = intro;
    this.sourceUrl = sourceUrl;
    this.iconInfo = iconInfo;
    this.subscribeCount = subscribeCount;
    setSubscribeCountIsSet(true);
    this.channelId = channelId;
    setChannelIdIsSet(true);
    this.orderWeight = orderWeight;
    setOrderWeightIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.recommendFlag = recommendFlag;
    setRecommendFlagIsSet(true);
    this.fetchStatus = fetchStatus;
    setFetchStatusIsSet(true);
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    this.online = online;
    setOnlineIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Source(Source other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIntro()) {
      this.intro = other.intro;
    }
    if (other.isSetSourceUrl()) {
      this.sourceUrl = other.sourceUrl;
    }
    if (other.isSetIconInfo()) {
      this.iconInfo = other.iconInfo;
    }
    this.subscribeCount = other.subscribeCount;
    this.channelId = other.channelId;
    this.orderWeight = other.orderWeight;
    this.level = other.level;
    this.status = other.status;
    this.recommendFlag = other.recommendFlag;
    this.fetchStatus = other.fetchStatus;
    this.createdAt = other.createdAt;
    this.updatedAt = other.updatedAt;
    this.online = other.online;
  }

  public Source deepCopy() {
    return new Source(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.intro = null;
    this.sourceUrl = null;
    this.iconInfo = null;
    setSubscribeCountIsSet(false);
    this.subscribeCount = 0;
    setChannelIdIsSet(false);
    this.channelId = 0;
    setOrderWeightIsSet(false);
    this.orderWeight = 0;
    setLevelIsSet(false);
    this.level = 0;
    setStatusIsSet(false);
    this.status = 0;
    setRecommendFlagIsSet(false);
    this.recommendFlag = 0;
    setFetchStatusIsSet(false);
    this.fetchStatus = 0;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    setUpdatedAtIsSet(false);
    this.updatedAt = 0;
    setOnlineIsSet(false);
    this.online = 0;
  }

  @Id 
  @GeneratedValue(generator = "identity") 
  @GenericGenerator(name = "identity", strategy = "identity") 
  @Column(name="id")
  public long getId() {
    return this.id;
  }

  public Source setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @Column(name="name")
  public String getName() {
    return this.name;
  }

  public Source setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @Column(name="intro")
  public String getIntro() {
    return this.intro;
  }

  public Source setIntro(String intro) {
    this.intro = intro;
    return this;
  }

  public void unsetIntro() {
    this.intro = null;
  }

  /** Returns true if field intro is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetIntro() {
    return this.intro != null;
  }

  public void setIntroIsSet(boolean value) {
    if (!value) {
      this.intro = null;
    }
  }

  @Column(name="source_url")
  public String getSourceUrl() {
    return this.sourceUrl;
  }

  public Source setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  public void unsetSourceUrl() {
    this.sourceUrl = null;
  }

  /** Returns true if field sourceUrl is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetSourceUrl() {
    return this.sourceUrl != null;
  }

  public void setSourceUrlIsSet(boolean value) {
    if (!value) {
      this.sourceUrl = null;
    }
  }

  @Column(name="icon_info")
  public String getIconInfo() {
    return this.iconInfo;
  }

  public Source setIconInfo(String iconInfo) {
    this.iconInfo = iconInfo;
    return this;
  }

  public void unsetIconInfo() {
    this.iconInfo = null;
  }

  /** Returns true if field iconInfo is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetIconInfo() {
    return this.iconInfo != null;
  }

  public void setIconInfoIsSet(boolean value) {
    if (!value) {
      this.iconInfo = null;
    }
  }

  @Column(name="subscribe_count")
  public int getSubscribeCount() {
    return this.subscribeCount;
  }

  public Source setSubscribeCount(int subscribeCount) {
    this.subscribeCount = subscribeCount;
    setSubscribeCountIsSet(true);
    return this;
  }

  public void unsetSubscribeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBSCRIBECOUNT_ISSET_ID);
  }

  /** Returns true if field subscribeCount is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetSubscribeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBSCRIBECOUNT_ISSET_ID);
  }

  public void setSubscribeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBSCRIBECOUNT_ISSET_ID, value);
  }

  @Column(name="channel_id")
  public long getChannelId() {
    return this.channelId;
  }

  public Source setChannelId(long channelId) {
    this.channelId = channelId;
    setChannelIdIsSet(true);
    return this;
  }

  public void unsetChannelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetChannelId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  public void setChannelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
  }

  @Column(name="order_weight")
  public int getOrderWeight() {
    return this.orderWeight;
  }

  public Source setOrderWeight(int orderWeight) {
    this.orderWeight = orderWeight;
    setOrderWeightIsSet(true);
    return this;
  }

  public void unsetOrderWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERWEIGHT_ISSET_ID);
  }

  /** Returns true if field orderWeight is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetOrderWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERWEIGHT_ISSET_ID);
  }

  public void setOrderWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERWEIGHT_ISSET_ID, value);
  }

  @Column(name="level")
  public int getLevel() {
    return this.level;
  }

  public Source setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  @Column(name="status")
  public int getStatus() {
    return this.status;
  }

  public Source setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  @Column(name="recommend_flag")
  public int getRecommendFlag() {
    return this.recommendFlag;
  }

  public Source setRecommendFlag(int recommendFlag) {
    this.recommendFlag = recommendFlag;
    setRecommendFlagIsSet(true);
    return this;
  }

  public void unsetRecommendFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDFLAG_ISSET_ID);
  }

  /** Returns true if field recommendFlag is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetRecommendFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDFLAG_ISSET_ID);
  }

  public void setRecommendFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDFLAG_ISSET_ID, value);
  }

  @Column(name="fetch_status")
  public int getFetchStatus() {
    return this.fetchStatus;
  }

  public Source setFetchStatus(int fetchStatus) {
    this.fetchStatus = fetchStatus;
    setFetchStatusIsSet(true);
    return this;
  }

  public void unsetFetchStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FETCHSTATUS_ISSET_ID);
  }

  /** Returns true if field fetchStatus is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetFetchStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FETCHSTATUS_ISSET_ID);
  }

  public void setFetchStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FETCHSTATUS_ISSET_ID, value);
  }

  @Column(name="created_at")
  public long getCreatedAt() {
    return this.createdAt;
  }

  public Source setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  @Column(name="updated_at")
  public long getUpdatedAt() {
    return this.updatedAt;
  }

  public Source setUpdatedAt(long updatedAt) {
    this.updatedAt = updatedAt;
    setUpdatedAtIsSet(true);
    return this;
  }

  public void unsetUpdatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetUpdatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDAT_ISSET_ID);
  }

  public void setUpdatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDAT_ISSET_ID, value);
  }

  @Column(name="online")
  public int getOnline() {
    return this.online;
  }

  public Source setOnline(int online) {
    this.online = online;
    setOnlineIsSet(true);
    return this;
  }

  public void unsetOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSetOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  public void setOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case INTRO:
      if (value == null) {
        unsetIntro();
      } else {
        setIntro((String)value);
      }
      break;

    case SOURCE_URL:
      if (value == null) {
        unsetSourceUrl();
      } else {
        setSourceUrl((String)value);
      }
      break;

    case ICON_INFO:
      if (value == null) {
        unsetIconInfo();
      } else {
        setIconInfo((String)value);
      }
      break;

    case SUBSCRIBE_COUNT:
      if (value == null) {
        unsetSubscribeCount();
      } else {
        setSubscribeCount((Integer)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((Long)value);
      }
      break;

    case ORDER_WEIGHT:
      if (value == null) {
        unsetOrderWeight();
      } else {
        setOrderWeight((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case RECOMMEND_FLAG:
      if (value == null) {
        unsetRecommendFlag();
      } else {
        setRecommendFlag((Integer)value);
      }
      break;

    case FETCH_STATUS:
      if (value == null) {
        unsetFetchStatus();
      } else {
        setFetchStatus((Integer)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((Long)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case INTRO:
      return getIntro();

    case SOURCE_URL:
      return getSourceUrl();

    case ICON_INFO:
      return getIconInfo();

    case SUBSCRIBE_COUNT:
      return Integer.valueOf(getSubscribeCount());

    case CHANNEL_ID:
      return Long.valueOf(getChannelId());

    case ORDER_WEIGHT:
      return Integer.valueOf(getOrderWeight());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case STATUS:
      return Integer.valueOf(getStatus());

    case RECOMMEND_FLAG:
      return Integer.valueOf(getRecommendFlag());

    case FETCH_STATUS:
      return Integer.valueOf(getFetchStatus());

    case CREATED_AT:
      return Long.valueOf(getCreatedAt());

    case UPDATED_AT:
      return Long.valueOf(getUpdatedAt());

    case ONLINE:
      return Integer.valueOf(getOnline());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Transient
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case INTRO:
      return isSetIntro();
    case SOURCE_URL:
      return isSetSourceUrl();
    case ICON_INFO:
      return isSetIconInfo();
    case SUBSCRIBE_COUNT:
      return isSetSubscribeCount();
    case CHANNEL_ID:
      return isSetChannelId();
    case ORDER_WEIGHT:
      return isSetOrderWeight();
    case LEVEL:
      return isSetLevel();
    case STATUS:
      return isSetStatus();
    case RECOMMEND_FLAG:
      return isSetRecommendFlag();
    case FETCH_STATUS:
      return isSetFetchStatus();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case ONLINE:
      return isSetOnline();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Source)
      return this.equals((Source)that);
    return false;
  }

  public boolean equals(Source that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_intro = true && this.isSetIntro();
    boolean that_present_intro = true && that.isSetIntro();
    if (this_present_intro || that_present_intro) {
      if (!(this_present_intro && that_present_intro))
        return false;
      if (!this.intro.equals(that.intro))
        return false;
    }

    boolean this_present_sourceUrl = true && this.isSetSourceUrl();
    boolean that_present_sourceUrl = true && that.isSetSourceUrl();
    if (this_present_sourceUrl || that_present_sourceUrl) {
      if (!(this_present_sourceUrl && that_present_sourceUrl))
        return false;
      if (!this.sourceUrl.equals(that.sourceUrl))
        return false;
    }

    boolean this_present_iconInfo = true && this.isSetIconInfo();
    boolean that_present_iconInfo = true && that.isSetIconInfo();
    if (this_present_iconInfo || that_present_iconInfo) {
      if (!(this_present_iconInfo && that_present_iconInfo))
        return false;
      if (!this.iconInfo.equals(that.iconInfo))
        return false;
    }

    boolean this_present_subscribeCount = true;
    boolean that_present_subscribeCount = true;
    if (this_present_subscribeCount || that_present_subscribeCount) {
      if (!(this_present_subscribeCount && that_present_subscribeCount))
        return false;
      if (this.subscribeCount != that.subscribeCount)
        return false;
    }

    boolean this_present_channelId = true;
    boolean that_present_channelId = true;
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (this.channelId != that.channelId)
        return false;
    }

    boolean this_present_orderWeight = true;
    boolean that_present_orderWeight = true;
    if (this_present_orderWeight || that_present_orderWeight) {
      if (!(this_present_orderWeight && that_present_orderWeight))
        return false;
      if (this.orderWeight != that.orderWeight)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_recommendFlag = true;
    boolean that_present_recommendFlag = true;
    if (this_present_recommendFlag || that_present_recommendFlag) {
      if (!(this_present_recommendFlag && that_present_recommendFlag))
        return false;
      if (this.recommendFlag != that.recommendFlag)
        return false;
    }

    boolean this_present_fetchStatus = true;
    boolean that_present_fetchStatus = true;
    if (this_present_fetchStatus || that_present_fetchStatus) {
      if (!(this_present_fetchStatus && that_present_fetchStatus))
        return false;
      if (this.fetchStatus != that.fetchStatus)
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_updatedAt = true;
    boolean that_present_updatedAt = true;
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (this.updatedAt != that.updatedAt)
        return false;
    }

    boolean this_present_online = true;
    boolean that_present_online = true;
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (this.online != that.online)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Source other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Source typedOther = (Source)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntro()).compareTo(typedOther.isSetIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intro, typedOther.intro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceUrl()).compareTo(typedOther.isSetSourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceUrl, typedOther.sourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconInfo()).compareTo(typedOther.isSetIconInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconInfo, typedOther.iconInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribeCount()).compareTo(typedOther.isSetSubscribeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribeCount, typedOther.subscribeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderWeight()).compareTo(typedOther.isSetOrderWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderWeight, typedOther.orderWeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendFlag()).compareTo(typedOther.isSetRecommendFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendFlag, typedOther.recommendFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchStatus()).compareTo(typedOther.isSetFetchStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchStatus, typedOther.fetchStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(typedOther.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, typedOther.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(typedOther.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, typedOther.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Source(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intro:");
    if (this.intro == null) {
      sb.append("null");
    } else {
      sb.append(this.intro);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceUrl:");
    if (this.sourceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconInfo:");
    if (this.iconInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.iconInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscribeCount:");
    sb.append(this.subscribeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    sb.append(this.channelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderWeight:");
    sb.append(this.orderWeight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendFlag:");
    sb.append(this.recommendFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fetchStatus:");
    sb.append(this.fetchStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    sb.append(this.updatedAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("online:");
    sb.append(this.online);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SourceStandardSchemeFactory implements SchemeFactory {
    public SourceStandardScheme getScheme() {
      return new SourceStandardScheme();
    }
  }

  private static class SourceStandardScheme extends StandardScheme<Source> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Source struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTRO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intro = iprot.readString();
              struct.setIntroIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceUrl = iprot.readString();
              struct.setSourceUrlIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ICON_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconInfo = iprot.readString();
              struct.setIconInfoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUBSCRIBE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subscribeCount = iprot.readI32();
              struct.setSubscribeCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.channelId = iprot.readI64();
              struct.setChannelIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderWeight = iprot.readI32();
              struct.setOrderWeightIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECOMMEND_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recommendFlag = iprot.readI32();
              struct.setRecommendFlagIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FETCH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchStatus = iprot.readI32();
              struct.setFetchStatusIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedAt = iprot.readI64();
              struct.setUpdatedAtIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.online = iprot.readI32();
              struct.setOnlineIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Source struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.intro != null) {
        oprot.writeFieldBegin(INTRO_FIELD_DESC);
        oprot.writeString(struct.intro);
        oprot.writeFieldEnd();
      }
      if (struct.sourceUrl != null) {
        oprot.writeFieldBegin(SOURCE_URL_FIELD_DESC);
        oprot.writeString(struct.sourceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.iconInfo != null) {
        oprot.writeFieldBegin(ICON_INFO_FIELD_DESC);
        oprot.writeString(struct.iconInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBSCRIBE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.subscribeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
      oprot.writeI64(struct.channelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_WEIGHT_FIELD_DESC);
      oprot.writeI32(struct.orderWeight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOMMEND_FLAG_FIELD_DESC);
      oprot.writeI32(struct.recommendFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FETCH_STATUS_FIELD_DESC);
      oprot.writeI32(struct.fetchStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
      oprot.writeI64(struct.updatedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_FIELD_DESC);
      oprot.writeI32(struct.online);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SourceTupleSchemeFactory implements SchemeFactory {
    public SourceTupleScheme getScheme() {
      return new SourceTupleScheme();
    }
  }

  private static class SourceTupleScheme extends TupleScheme<Source> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Source struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetIntro()) {
        optionals.set(2);
      }
      if (struct.isSetSourceUrl()) {
        optionals.set(3);
      }
      if (struct.isSetIconInfo()) {
        optionals.set(4);
      }
      if (struct.isSetSubscribeCount()) {
        optionals.set(5);
      }
      if (struct.isSetChannelId()) {
        optionals.set(6);
      }
      if (struct.isSetOrderWeight()) {
        optionals.set(7);
      }
      if (struct.isSetLevel()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetRecommendFlag()) {
        optionals.set(10);
      }
      if (struct.isSetFetchStatus()) {
        optionals.set(11);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(12);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(13);
      }
      if (struct.isSetOnline()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIntro()) {
        oprot.writeString(struct.intro);
      }
      if (struct.isSetSourceUrl()) {
        oprot.writeString(struct.sourceUrl);
      }
      if (struct.isSetIconInfo()) {
        oprot.writeString(struct.iconInfo);
      }
      if (struct.isSetSubscribeCount()) {
        oprot.writeI32(struct.subscribeCount);
      }
      if (struct.isSetChannelId()) {
        oprot.writeI64(struct.channelId);
      }
      if (struct.isSetOrderWeight()) {
        oprot.writeI32(struct.orderWeight);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRecommendFlag()) {
        oprot.writeI32(struct.recommendFlag);
      }
      if (struct.isSetFetchStatus()) {
        oprot.writeI32(struct.fetchStatus);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeI64(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeI64(struct.updatedAt);
      }
      if (struct.isSetOnline()) {
        oprot.writeI32(struct.online);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Source struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.intro = iprot.readString();
        struct.setIntroIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sourceUrl = iprot.readString();
        struct.setSourceUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.iconInfo = iprot.readString();
        struct.setIconInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subscribeCount = iprot.readI32();
        struct.setSubscribeCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.channelId = iprot.readI64();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderWeight = iprot.readI32();
        struct.setOrderWeightIsSet(true);
      }
      if (incoming.get(8)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.recommendFlag = iprot.readI32();
        struct.setRecommendFlagIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fetchStatus = iprot.readI32();
        struct.setFetchStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createdAt = iprot.readI64();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updatedAt = iprot.readI64();
        struct.setUpdatedAtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.online = iprot.readI32();
        struct.setOnlineIsSet(true);
      }
    }
  }

}

